{
  "paragraphs": [
    {
      "text": "%md\n# Big Data Analytics Play: Financial Fraud Detection\n\nWelcome! In this Big Data Analytics Play Experience, you will use your skills to create a predictive model that can detect fraudulent financial transactions in a dataset.  Remember that Play is different from Learn because you will not be given all needed code nor explanations, and there may not be a clear answer for all activities. Instead, you will be given suggestions for how to approach the basic tasks of building a predictive model with Spark and InterSystems IRIS, but you will need to use your data science and coding skills to find out how to best solve this challenge. Again, it is important to remember that this is not a standard online learning course. \n\nYou are encouraged to work with your peers via the **InterSystems Developer Community** to discuss approaches and solutions for this Play experience. \u003ca href\u003d\"https://community.intersystems.com/group/intersystems-iris-experience/\" target\u003d\"_blank\"\u003eThe InterSystems IRIS Experience group\u003c/a\u003e has been specially created for the InterSystems IRIS Experience. Be sure to tag your post with **Big Data Experience** to link up with other people in the Big Data Analytics Experience.\n\nFor questions or issues on the dataset itself or about this Play material, please email [**InterSystems Online Learning**] (mailto:onlinetraining@intersystems.com?subject\u003dIRIS%20Experience:%20Big%20Data%20Analytics%20Play). \n\nFor technical questions about InterSystems IRIS, please contact the [**Worldwide Response Center**] (mailto:support@intersystems.com?subject\u003dIRIS%20Experience:%20Big%20Data%20Analytics%20Play).\n\nGood luck and enjoy the challenge!",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eBig Data Analytics Play: Financial Fraud Detection\u003c/h1\u003e\n\u003cp\u003eWelcome! In this Big Data Analytics Play Experience, you will use your skills to create a predictive model that can detect fraudulent financial transactions in a dataset. Remember that Play is different from Learn because you will not be given all needed code nor explanations, and there may not be a clear answer for all activities. Instead, you will be given suggestions for how to approach the basic tasks of building a predictive model with Spark and InterSystems IRIS, but you will need to use your data science and coding skills to find out how to best solve this challenge. Again, it is important to remember that this is not a standard online learning course. \u003c/p\u003e\n\u003cp\u003eYou are encouraged to work with your peers via the \u003cstrong\u003eInterSystems Developer Community\u003c/strong\u003e to discuss approaches and solutions for this Play experience. \u003ca href\u003d\"https://community.intersystems.com/group/intersystems-iris-experience/\" target\u003d\"_blank\"\u003eThe InterSystems IRIS Experience group\u003c/a\u003e has been specially created for the InterSystems IRIS Experience. Be sure to tag your post with \u003cstrong\u003eBig Data Experience\u003c/strong\u003e to link up with other people in the Big Data Analytics Experience.\u003c/p\u003e\n\u003cp\u003eFor questions or issues on the dataset itself or about this Play material, please email \u003ca href\u003d\"mailto:onlinetraining@intersystems.com?subject\u003dIRIS%20Experience:%20Big%20Data%20Analytics%20Play\"\u003e\u003cstrong\u003eInterSystems Online Learning\u003c/strong\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eFor technical questions about InterSystems IRIS, please contact the \u003ca href\u003d\"mailto:support@intersystems.com?subject\u003dIRIS%20Experience:%20Big%20Data%20Analytics%20Play\"\u003e\u003cstrong\u003eWorldwide Response Center\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGood luck and enjoy the challenge!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675031_-1929705808",
      "id": "20170720-112641_833385781",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Introduction: Detecting Financial Fraud\n\nWith increasing digital access to global financial transactions and the rise of new types of third-party payment systems, detecting fraud has become an ever-increasing challenge for the financial industry. Additionally, the chances for fraud and theft are increasing with the proliferation of more digital access points as more consumers use mobile banking applications. Big data analytics and machine learning offer ways to create models that can expose fraud techniques even as they continue to evolve. However, to be effective, huge amounts of data need to be analyzed either in real time or shortly after transaction time — or, ideally, both. \n\nOne of the great challenges of building predictive models is that the incidence of global financial fraud is generally low, making predicting certain fraud approaches more difficult. Another challenge is the lack of useful datasets, as financial institutions are understandably hesitant to share this data.\n\nIn this InterSystems IRIS Play Experience, you will consider a financial transaction dataset, explore its contents, and create a predictive model. Again, there will be some basic ideas to inspire your exploration, but you will need to design and write the code that will perform these tasks. You will see example code that creates a model based on one approach; however, this approach may not solve the challenge as you would like. It is up to you to create the predictive model that works for you. \n",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eIntroduction: Detecting Financial Fraud\u003c/h2\u003e\n\u003cp\u003eWith increasing digital access to global financial transactions and the rise of new types of third-party payment systems, detecting fraud has become an ever-increasing challenge for the financial industry. Additionally, the chances for fraud and theft are increasing with the proliferation of more digital access points as more consumers use mobile banking applications. Big data analytics and machine learning offer ways to create models that can expose fraud techniques even as they continue to evolve. However, to be effective, huge amounts of data need to be analyzed either in real time or shortly after transaction time — or, ideally, both. \u003c/p\u003e\n\u003cp\u003eOne of the great challenges of building predictive models is that the incidence of global financial fraud is generally low, making predicting certain fraud approaches more difficult. Another challenge is the lack of useful datasets, as financial institutions are understandably hesitant to share this data.\u003c/p\u003e\n\u003cp\u003eIn this InterSystems IRIS Play Experience, you will consider a financial transaction dataset, explore its contents, and create a predictive model. Again, there will be some basic ideas to inspire your exploration, but you will need to design and write the code that will perform these tasks. You will see example code that creates a model based on one approach; however, this approach may not solve the challenge as you would like. It is up to you to create the predictive model that works for you.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675072_-1860835754",
      "id": "20180105-135631_363455879",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## The Dataset\n\nFor this Big Data Analytics Play experience, you have a simulated dataset already loaded into InterSystems IRIS with which you can work. The data is labeled as simulated, but note that it is not random. It is a subset of the original created by \u003ca href\u003d\"https://www.researchgate.net/profile/Stefan_Axelsson4/publication/313138956_PAYSIM_A_FINANCIAL_MOBILE_MONEY_SIMULATOR_FOR_FRAUD_DETECTION/links/5890f87e92851cda2568a295/PAYSIM-A-FINANCIAL-MOBILE-MONEY-SIMULATOR-FOR-FRAUD-DETECTION.pdf\" target\u003d\"_blank\"\u003ePaySim\u003c/a\u003e a financial transaction simulation tool and dataset created specifically to address the scarcity of available financial data. \n\n### The Data\n  **step:**  Maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n  **transType:** CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n  **amount:** Amount of the transaction in local currency (not specified).\n  **nameOrig:** Customer who started the transaction.\n  **oldbalanceOrig:** Initial balance before the transaction.\n  **newbalanceOrig:** New balance after the transaction.\n  **nameDest:** Customer who is the recipient of the transaction. Note: Beginning initial \"C\"\u003d Customer, but \"M\"\u003d Merchant.\n  **oldbalanceDest:** Initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\n  **newbalanceDest:** New balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\t\n  **isFraud:** Transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n  **isFlaggedFraud:** The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200,000 in a single transaction.\n ",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eThe Dataset\u003c/h2\u003e\n\u003cp\u003eFor this Big Data Analytics Play experience, you have a simulated dataset already loaded into InterSystems IRIS with which you can work. The data is labeled as simulated, but note that it is not random. It is a subset of the original created by \u003ca href\u003d\"https://www.researchgate.net/profile/Stefan_Axelsson4/publication/313138956_PAYSIM_A_FINANCIAL_MOBILE_MONEY_SIMULATOR_FOR_FRAUD_DETECTION/links/5890f87e92851cda2568a295/PAYSIM-A-FINANCIAL-MOBILE-MONEY-SIMULATOR-FOR-FRAUD-DETECTION.pdf\" target\u003d\"_blank\"\u003ePaySim\u003c/a\u003e a financial transaction simulation tool and dataset created specifically to address the scarcity of available financial data. \u003c/p\u003e\n\u003ch3\u003eThe Data\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003estep:\u003c/strong\u003e Maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\u003cbr/\u003e \u003cstrong\u003etransType:\u003c/strong\u003e CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\u003cbr/\u003e \u003cstrong\u003eamount:\u003c/strong\u003e Amount of the transaction in local currency (not specified).\u003cbr/\u003e \u003cstrong\u003enameOrig:\u003c/strong\u003e Customer who started the transaction.\u003cbr/\u003e \u003cstrong\u003eoldbalanceOrig:\u003c/strong\u003e Initial balance before the transaction.\u003cbr/\u003e \u003cstrong\u003enewbalanceOrig:\u003c/strong\u003e New balance after the transaction.\u003cbr/\u003e \u003cstrong\u003enameDest:\u003c/strong\u003e Customer who is the recipient of the transaction. Note: Beginning initial \u0026ldquo;C\u0026rdquo;\u003d Customer, but \u0026ldquo;M\u0026rdquo;\u003d Merchant.\u003cbr/\u003e \u003cstrong\u003eoldbalanceDest:\u003c/strong\u003e Initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\u003cbr/\u003e \u003cstrong\u003enewbalanceDest:\u003c/strong\u003e New balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\u003cbr/\u003e \u003cstrong\u003eisFraud:\u003c/strong\u003e Transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\u003cbr/\u003e \u003cstrong\u003eisFlaggedFraud:\u003c/strong\u003e The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200,000 in a single transaction.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675079_-1861990001",
      "id": "20180111-221226_245132446",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## An Important Note on the Data\n\n\nAs mentioned, the data in this Play experience is publicly available as \u003ca href\u003d\"https://www.researchgate.net/profile/Stefan_Axelsson4/publication/313138956_PAYSIM_A_FINANCIAL_MOBILE_MONEY_SIMULATOR_FOR_FRAUD_DETECTION/links/5890f87e92851cda2568a295/PAYSIM-A-FINANCIAL-MOBILE-MONEY-SIMULATOR-FOR-FRAUD-DETECTION.pdf\" target\u003d\"_blank\"\u003ePaySim\u003c/a\u003e. PaySim is a tool that generates transaction data based on a historical dataset of a real-world digital payment system. However, PaySim has some aspects of the data that are not straightforward and could seem like anomalies. The below notes will prepare you for these aspects so you can account for them in your data investigation. \n\nHowever, if you prefer to discover the data on your own without assistance, skip the explanation below and continue on to the next section “Review the Data \u0026mdash; First Look.”\n\n\n### Floating Point Issues\n\nAs a result of how the data was loaded, you will need to use the round function to accurately perform mathematic equivalencies. For example: \n`round($\"amount\") \u003d\u003d\u003d round($\"newbalanceDest\" - $\"oldbalanceDest\")`\n\n\n### Expected Transaction Atomicity\n\nWith the names *Originating Account* and *Destination Account*, you might expect that the amounts are debited from the origin account and credited to the destination account in the same transaction record for all instances. For example: \n\n     Amount \u003d New Balance Destination – Old Balance Destination AND Amount \u003d Old Balance Origin – New Balance Origin\n\nAs a filter in Scala, this equation would look like this: \n`.filter(round($\"amount\") \u003d\u003d\u003d round($\"newbalanceDest\" - $\"oldbalanceDest\") \u0026\u0026 (round($\"amount\") \u003d\u003d\u003d round($\"oldbalanceOrig\" - $\"newbalanceOrig\")))`  \n\n\nHowever, these equations do not always hold. Funds are credited and debited differently based on transaction type (`transType`) and some transactions even vary from these general rules. Remember this dataset mimics a real-world digital payment system with regular users and merchants. Some transactions involve trading the digital currency for real-world cash or goods, which are not captured in the system. Here are how the transactions differ in general based on their type: \n\n`PAYMENT` – debits the origin account; always leaves destination balances as zeros\n`CASH_IN` – credits the origin account; debits the destination account\n`TRANSFER` – only the destination is credited the amount\n`CASH_OUT` – the destination account is credited; the origin account left with zero balance\n`DEBIT` – the origin account is debited the amount; the destination is credited the amount\n\nAs part of your data investigation, you may need to account for these differing transactions. \n\n\n### Nulls As Zeros\n\nPaySim’s data creation process unfortunately does not distinguish between null values (for unrecorded data) and zeros. Because this you will see a high incidence of zero amounts in the account balances. \n\n### How To Proceed\n\nThe above issues may make the data look strange at first, but PaySim accurately mimics the distributions seen in the real-world dataset on which it was based. For a more detailed explanation of the data, see the \u003ca href\u003d\"https://www.researchgate.net/profile/Stefan_Axelsson4/publication/313138956_PAYSIM_A_FINANCIAL_MOBILE_MONEY_SIMULATOR_FOR_FRAUD_DETECTION/links/5890f87e92851cda2568a295/PAYSIM-A-FINANCIAL-MOBILE-MONEY-SIMULATOR-FOR-FRAUD-DETECTION.pdf\" target\u003d\"_blank\"\u003ePaySim research publication\u003c/a\u003e. \n\nIn this realistic scenario, you, like any data scientist, will decide how to proceed. You can build your model based on this raw data. Or, you can clean the data to ensure it is free from the transactions that do not fit our intuitive definition of atomicity and perform your analysis on a sterile subset. The choice is yours and so is the data – enjoy!\n\n\n ",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAn Important Note on the Data\u003c/h2\u003e\n\u003cp\u003eAs mentioned, the data in this Play experience is publicly available as \u003ca href\u003d\"https://www.researchgate.net/profile/Stefan_Axelsson4/publication/313138956_PAYSIM_A_FINANCIAL_MOBILE_MONEY_SIMULATOR_FOR_FRAUD_DETECTION/links/5890f87e92851cda2568a295/PAYSIM-A-FINANCIAL-MOBILE-MONEY-SIMULATOR-FOR-FRAUD-DETECTION.pdf\" target\u003d\"_blank\"\u003ePaySim\u003c/a\u003e. PaySim is a tool that generates transaction data based on a historical dataset of a real-world digital payment system. However, PaySim has some aspects of the data that are not straightforward and could seem like anomalies. The below notes will prepare you for these aspects so you can account for them in your data investigation. \u003c/p\u003e\n\u003cp\u003eHowever, if you prefer to discover the data on your own without assistance, skip the explanation below and continue on to the next section “Review the Data \u0026mdash; First Look.”\u003c/p\u003e\n\u003ch3\u003eFloating Point Issues\u003c/h3\u003e\n\u003cp\u003eAs a result of how the data was loaded, you will need to use the round function to accurately perform mathematic equivalencies. For example:\u003cbr/\u003e\u003ccode\u003eround($\u0026quot;amount\u0026quot;) \u003d\u003d\u003d round($\u0026quot;newbalanceDest\u0026quot; - $\u0026quot;oldbalanceDest\u0026quot;)\u003c/code\u003e\u003c/p\u003e\n\u003ch3\u003eExpected Transaction Atomicity\u003c/h3\u003e\n\u003cp\u003eWith the names \u003cem\u003eOriginating Account\u003c/em\u003e and \u003cem\u003eDestination Account\u003c/em\u003e, you might expect that the amounts are debited from the origin account and credited to the destination account in the same transaction record for all instances. For example: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e Amount \u003d New Balance Destination – Old Balance Destination AND Amount \u003d Old Balance Origin – New Balance Origin\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs a filter in Scala, this equation would look like this:\u003cbr/\u003e\u003ccode\u003e.filter(round($\u0026quot;amount\u0026quot;) \u003d\u003d\u003d round($\u0026quot;newbalanceDest\u0026quot; - $\u0026quot;oldbalanceDest\u0026quot;) \u0026amp;\u0026amp; (round($\u0026quot;amount\u0026quot;) \u003d\u003d\u003d round($\u0026quot;oldbalanceOrig\u0026quot; - $\u0026quot;newbalanceOrig\u0026quot;)))\u003c/code\u003e \u003c/p\u003e\n\u003cp\u003eHowever, these equations do not always hold. Funds are credited and debited differently based on transaction type (\u003ccode\u003etransType\u003c/code\u003e) and some transactions even vary from these general rules. Remember this dataset mimics a real-world digital payment system with regular users and merchants. Some transactions involve trading the digital currency for real-world cash or goods, which are not captured in the system. Here are how the transactions differ in general based on their type: \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePAYMENT\u003c/code\u003e – debits the origin account; always leaves destination balances as zeros\u003cbr/\u003e\u003ccode\u003eCASH_IN\u003c/code\u003e – credits the origin account; debits the destination account\u003cbr/\u003e\u003ccode\u003eTRANSFER\u003c/code\u003e – only the destination is credited the amount\u003cbr/\u003e\u003ccode\u003eCASH_OUT\u003c/code\u003e – the destination account is credited; the origin account left with zero balance\u003cbr/\u003e\u003ccode\u003eDEBIT\u003c/code\u003e – the origin account is debited the amount; the destination is credited the amount\u003c/p\u003e\n\u003cp\u003eAs part of your data investigation, you may need to account for these differing transactions. \u003c/p\u003e\n\u003ch3\u003eNulls As Zeros\u003c/h3\u003e\n\u003cp\u003ePaySim’s data creation process unfortunately does not distinguish between null values (for unrecorded data) and zeros. Because this you will see a high incidence of zero amounts in the account balances. \u003c/p\u003e\n\u003ch3\u003eHow To Proceed\u003c/h3\u003e\n\u003cp\u003eThe above issues may make the data look strange at first, but PaySim accurately mimics the distributions seen in the real-world dataset on which it was based. For a more detailed explanation of the data, see the \u003ca href\u003d\"https://www.researchgate.net/profile/Stefan_Axelsson4/publication/313138956_PAYSIM_A_FINANCIAL_MOBILE_MONEY_SIMULATOR_FOR_FRAUD_DETECTION/links/5890f87e92851cda2568a295/PAYSIM-A-FINANCIAL-MOBILE-MONEY-SIMULATOR-FOR-FRAUD-DETECTION.pdf\" target\u003d\"_blank\"\u003ePaySim research publication\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eIn this realistic scenario, you, like any data scientist, will decide how to proceed. You can build your model based on this raw data. Or, you can clean the data to ensure it is free from the transactions that do not fit our intuitive definition of atomicity and perform your analysis on a sterile subset. The choice is yours and so is the data – enjoy!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675081_-1864298495",
      "id": "20180419-173636_1101005597",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Review the Data \u0026mdash; First Look\n\nThe below code samples will allow you to review your dataset as it has been loaded to InterSystems IRIS database table: `zepplin.PayTrans`. With these samples, you can get an initial, basic idea of the data elements and incidence of fraud in the dataset. Later, you can explore the data further.  Additionally, you probably have your own ideas of how you want to review the data, so change the code as you wish. \n\nAs you may have seen in Learn exercises, you can edit the code in the below code paragraphs and execute it using the play button in the upper right-hand corner of the paragraph.\n ",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eReview the Data \u0026mdash; First Look\u003c/h2\u003e\n\u003cp\u003eThe below code samples will allow you to review your dataset as it has been loaded to InterSystems IRIS database table: \u003ccode\u003ezepplin.PayTrans\u003c/code\u003e. With these samples, you can get an initial, basic idea of the data elements and incidence of fraud in the dataset. Later, you can explore the data further. Additionally, you probably have your own ideas of how you want to review the data, so change the code as you wish. \u003c/p\u003e\n\u003cp\u003eAs you may have seen in Learn exercises, you can edit the code in the below code paragraphs and execute it using the play button in the upper right-hand corner of the paragraph.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675085_-1865837490",
      "id": "20180112-123939_1060016457",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Retrieve data from InterSystems IRIS - zeppelin.PayTrans",
      "text": "val trans \u003d spark.read\n                .format(\"com.intersystems.spark\")\n                .option(\"dbtable\",\"zeppelin.PayTrans\")\n                .load()\n                \nz.show(trans.limit(500))",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "Expression_1",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "Aggregate_2",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1532538675087_-1865067992",
      "id": "20170720-110830_52791649",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Transaction Count",
      "text": "trans.count()",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "Expression_1",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "Aggregate_2",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1532538675102_-1858527261",
      "id": "20180111-224046_1876623432",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Incidence of Fraud\n\nNow that you have taken a basic look at the data and know how large your sample is, you might want to take a look at the incidence of fraud. You can look at `isFraud` and consider it against the total number of transactions and their types.\n\nRun the next two statements to look at the incidence of fraud and consider what transaction types are fraudulent.",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eIncidence of Fraud\u003c/h2\u003e\n\u003cp\u003eNow that you have taken a basic look at the data and know how large your sample is, you might want to take a look at the incidence of fraud. You can look at \u003ccode\u003eisFraud\u003c/code\u003e and consider it against the total number of transactions and their types.\u003c/p\u003e\n\u003cp\u003eRun the next two statements to look at the incidence of fraud and consider what transaction types are fraudulent.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675106_-1872378221",
      "id": "20180112-151822_364166325",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Fraud Transaction Count",
      "text": "// show count of fraudulent transactions\n\nz.show(trans.groupBy($\"isFraud\")\n             .agg(count($\"isFraud\")))",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": true,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "Expression_1",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "Aggregate_2",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1532538675107_-1872762970",
      "id": "20180111-225234_188950042",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Fraud Transactions by Transaction Type",
      "text": "// show fraudulent transactions by Transaction Type\n\nval trans1 \u003d trans\n             .filter($\"isFraud\" \u003d\u003d\u003d \"1\")\n\nz.show(trans1.groupBy($\"isFraud\", $\"transType\")\n             .agg(count($\"transType\")))\n",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "transType",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count(transType)",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1532538675110_-1873917217",
      "id": "20180112-163254_56590394",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Fraud Detection\n\nYou know from the data element descriptions that there is a field called `IsFlaggedFraud`, and you know from the documentation that this flag determines if a transaction was labeled as possible fraud. You can see how many transactions were flagged as possibly fraudulent and also compare that number to the number of actual fraudulent transactions. \n\nRun the next two statements and consider if `IsFlaggedFraud` is a useful indicator for your purposes.",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eFraud Detection\u003c/h2\u003e\n\u003cp\u003eYou know from the data element descriptions that there is a field called \u003ccode\u003eIsFlaggedFraud\u003c/code\u003e, and you know from the documentation that this flag determines if a transaction was labeled as possible fraud. You can see how many transactions were flagged as possibly fraudulent and also compare that number to the number of actual fraudulent transactions. \u003c/p\u003e\n\u003cp\u003eRun the next two statements and consider if \u003ccode\u003eIsFlaggedFraud\u003c/code\u003e is a useful indicator for your purposes.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675113_-1876610459",
      "id": "20180112-152834_1291258520",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Flagged as Fraud Transaction Count",
      "text": "// show transactions that were flagged as fraud from all data - fraudulent or not\n\nz.show(trans.groupBy($\"isFlaggedFraud\")\n             .agg(count($\"isFlaggedFraud\")))",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": true,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "Expression_1",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "Aggregate_2",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1532538675120_-1866991737",
      "id": "20180112-133329_1737514861",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Actual Fraud Transactions Flagged As Fraud",
      "text": "// show fraudulent transactions that were flagged as fraud - and were actually fraudulent\n\nval trans2 \u003d trans1\n  .filter($\"isFlaggedFraud\" \u003d\u003d\u003d \"1\")\n\nz.show(trans2)\n",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "transType",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "count(transType)",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          },
          "1": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1532538675122_-1866222239",
      "id": "20180112-001420_1824645854",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Next: Explore and Analyze the Data\nNow that you have taken a general look at the data and its incidence of fraud, you can continue to the [next notebook](/#/notebook/FINPLAY2) to explore and analyze your data.",
      "dateUpdated": "Jul 25, 2018 5:11:15 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eNext: Explore and Analyze the Data\u003c/h2\u003e\n\u003cp\u003eNow that you have taken a general look at the data and its incidence of fraud, you can continue to the \u003ca href\u003d\"/#/notebook/FINPLAY2\"\u003enext notebook\u003c/a\u003e to explore and analyze your data.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1532538675125_-1868915481",
      "id": "20170720-160254_1256360401",
      "dateCreated": "Jul 25, 2018 5:11:15 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "1. Financial Fraud Detection Challenge",
  "id": "2DNXDWVQQ",
  "angularObjects": {
    "2DHWQ7A7V:shared_process": [],
    "2DGTFGFBC:shared_process": [],
    "2DHATZD9M:shared_process": [],
    "2DKDARDPF:shared_process": [],
    "2DG8A819A:shared_process": [],
    "2DJVV28U3:shared_process": [],
    "2DKCAA3TS:shared_process": [],
    "2DHEPV9M3:shared_process": [],
    "2DKW8P766:shared_process": [],
    "2DGHX224C:shared_process": [],
    "2DGRSNE7G:shared_process": [],
    "2DGUG4SEP:shared_process": [],
    "2DHM86BYR:shared_process": [],
    "2DHYW1ZN6:shared_process": [],
    "2DJ16C4UE:shared_process": [],
    "2DJ4VH5DW:shared_process": [],
    "2DJBEDGYM:shared_process": [],
    "2DM19CFTF:shared_process": [],
    "2DHHCF91E:shared_process": [],
    "2DKCPR9P1:shared_process": []
  },
  "config": {},
  "info": {}
}