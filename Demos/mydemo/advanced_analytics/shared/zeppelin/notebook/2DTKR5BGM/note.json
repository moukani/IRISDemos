{
  "paragraphs": [
    {
      "text": "%spark.pyspark\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy.stats import skewnorm\nimport matplotlib.pyplot as plt\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nimport cPickle\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n",
      "user": "anonymous",
      "dateUpdated": "Sep 22, 2018 6:50:06 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1537430843563_1715773903",
      "id": "20180920-080723_2147307255",
      "dateCreated": "Sep 20, 2018 8:07:23 AM",
      "dateStarted": "Sep 22, 2018 6:50:06 PM",
      "dateFinished": "Sep 22, 2018 6:50:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndef data_prep(): \n    a \u003d 4\n    mean, var, skew, kurt \u003d skewnorm.stats(a, moments\u003d\u0027mvsk\u0027)\n    x \u003d np.linspace(skewnorm.ppf(0.01, a),\n                    skewnorm.ppf(0.99, a), 100)\n    x\u003dabs(x)\n    rv \u003d skewnorm(a)\n    r \u003d skewnorm.rvs(a, size\u003d2000)\n    load\u003dabs(r)\n    amin, amax \u003d min(load), max(load)\n    for i, val in enumerate(load):\n        load[i] \u003d (val-amin) / (amax-amin)\n    data_final \u003d pd.DataFrame({\u0027load\u0027:load})\n    \n    \n    \n    #############################################################################################################\n    #TOT########\n    tot \u003d sorted(load, key\u003dint)\n    def multiply(list):\n        return [i *4 for i in list]\n\n    def square(list):\n        return [i ** 2 for i in list]\n\n    def add45(list):\n        return [i+65 for i in list]\n\n    tot \u003d multiply(tot)\n    tot\u003dsquare(tot)\n    tot\u003dmultiply(tot)\n    tot\u003dadd45(tot)\n    len(tot)\n    data_final[\u0027tot\u0027] \u003d tot\n    \n    \n    ############################################################################################################3\n    #BOT\n    \n    random \u003d np.random.randint(low\u003d2, high\u003d5, size\u003d2000)\n    bot \u003d tot+random\n    data_final[\u0027bot\u0027] \u003d bot\n    \n    #########################################\n    #OV\n    mu, sigma \u003d 900, 27 # mean and standard deviation\n    rand_ov \u003d np.random.normal(mu, sigma, 2000)\n    ov\u003d-np.sort(-rand_ov)\n    data_final[\u0027ov\u0027] \u003d ov\n    \n    ###########################################################################################33\n    #mio\n    mu, sigma \u003d 0.7, 0.5 # mean and standard deviation\n    rand_mio \u003d np.random.normal(mu, sigma, 2000)\n    rand_mio\u003dabs(rand_mio)\n    mio\u003d-np.sort(-rand_mio)\n    #sns.distplot(mio)\n    data_final[\u0027mio\u0027] \u003d mio\n    \n    ####################################################################################################################\n    #vibration\n    data_final[\u0027vibration\u0027] \u003d ((data_final.bot * data_final.mio)/data_final.ov)*100\n    \n    \n    \n    ########################################################################################################3\n    #vibration_level\n    conditions \u003d [\n        (data_final[\u0027vibration\u0027] \u003e\u003d data_final.vibration.min()) \u0026 \n        (data_final[\u0027vibration\u0027] \u003c data_final.vibration.quantile(0.25)),\n\n        (data_final[\u0027vibration\u0027] \u003e data_final.vibration.quantile(0.25)) \u0026 \n        (data_final[\u0027vibration\u0027] \u003c data_final.vibration.quantile(0.50)),\n\n        (data_final[\u0027vibration\u0027] \u003e data_final.vibration.quantile(0.50)) \u0026\n        (data_final[\u0027vibration\u0027] \u003c data_final.vibration.quantile(0.75)),\n\n        (data_final[\u0027vibration\u0027] \u003e data_final.vibration.quantile(0.75)) \u0026\n        (data_final[\u0027vibration\u0027] \u003c\u003d data_final.vibration.max()),\n    ]\n\n\n\n    choices \u003d [\u00271\u0027,\u00272\u0027,\u00273\u0027,\u00274\u0027]\n    data_final[\u0027vib_level\u0027] \u003d np.select(conditions, choices, default\u003d\u00270\u0027)\n    \n    ################################################################################################################\n    #bulging\n    data_final[\u0027bulging\u0027] \u003d np.where((data_final[\u0027load\u0027] \u003e 0.7) \u0026  (data_final[\u0027bot\u0027] \u003e 100), \u00271\u0027, \u00270\u0027)\n    \n    \n    ######################################################################################################\n    #threat\n    conditions \u003d [\n        (data_final[\u0027tot\u0027] \u003e\u003d 80) \u0026 (data_final[\u0027tot\u0027] \u003c 85),\n\n        (data_final[\u0027tot\u0027] \u003e\u003d85) \u0026 (data_final[\u0027tot\u0027] \u003c 90), \n\n        (data_final[\u0027tot\u0027] \u003e\u003d 90) \u0026 (data_final[\u0027tot\u0027] \u003c 95),\n\n        (data_final[\u0027tot\u0027] \u003e\u003d 95) \u0026 (data_final[\u0027tot\u0027] \u003c 100),\n\n        (data_final[\u0027tot\u0027] \u003e\u003d 100),\n    ]\n\n\n\n    choices \u003d [\u00271\u0027,\u00272\u0027,\u00273\u0027,\u00274\u0027,\u00275\u0027]\n    data_final[\u0027threat\u0027] \u003d np.select(conditions, choices, default\u003d\u00270\u0027)\n    ##############################################################################################3\n    \n    return data_final\n\n\ndef data_cleaning(data_final):\n    categoricalFeatureNames \u003d [\"vib_level\",\"bulging\"]\n    numericalFeatureNames \u003d [\"load\",\"tot\",\"bot\",\"ov\",\"mio\",\"vibration\"]\n\n    for var in categoricalFeatureNames:\n        data_final[var] \u003d data_final[var].astype(\"category\")\n\n    for var in numericalFeatureNames:\n        data_final[var] \u003d data_final[var].astype(\"int\")\n\n    y \u003ddata_final.threat\n    data_final \u003d data_final.drop(\u0027threat\u0027,1)\n    return(data_final,y)\n\n\ndef random_forest(data_final, y,rf):\n    X_train, X_test, y_train, y_test \u003d train_test_split(data_final, y, random_state\u003d1)\n    rf_model \u003d RandomForestClassifier(n_estimators\u003d200)\n    rf_model.fit(X_train, y_train)\n    y_rf_pred_test \u003d rf_model.predict(X_test)\n    confusion_matrix_test \u003d confusion_matrix(y_test, y_rf_pred_test)\n    with open(\u0027/shared/{}\u0027.format(rf),\u0027wb\u0027) as f:\n                cPickle.dump(rf_model, f)    \n    print(\"Confusion matrix of 5-class classification\")\n    print(confusion_matrix_test)\n    print(\"Accuracy of the model:\",metrics.accuracy_score(y_test, y_rf_pred_test))",
      "user": "anonymous",
      "dateUpdated": "Sep 22, 2018 6:50:06 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1537431228192_355470358",
      "id": "20180920-081348_2567372",
      "dateCreated": "Sep 20, 2018 8:13:48 AM",
      "dateStarted": "Sep 22, 2018 6:50:06 PM",
      "dateFinished": "Sep 22, 2018 6:50:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndef main():\n    device_ids\u003d[\"Transformer001\",\"Transformer003\",\"Transformer005\",\"Transformer007\",\"Transformer009\"]\n    data_x\u003d[]\n    y\u003d[]\n    for i in range(10):\n        if i%2 !\u003d 0:\n            data_x.append(\"Transformer00{}\".format(i))\n\n    for i in range(10):\n        if i%2 !\u003d 0:\n            y.append(\"Transformer00{}\".format(i))\n            \n    df_names\u003d[]\n    for i in range(10):\n        if i%2 !\u003d 0:\n            df_names.append(\"Transformer00{}\".format(i))\n    \n    file_names\u003d[]\n    for i in range(10):\n        if i%2 !\u003d 0:\n            file_names.append(\"/shared/Transformer00{}.csv\".format(i))\n            \n    j\u003d0\n    for i in file_names:\n        df_names[j] \u003d pd.read_csv(i)\n        j\u003dj+1\n\n    rf_models \u003d [\u0027RF\u0027 + x for x in device_ids]\n    for i in range(len(device_ids)):\n        data_x[i],y[i] \u003d data_cleaning(df_names[i])\n        random_forest(data_x[i],y[i],rf_models[i])",
      "user": "anonymous",
      "dateUpdated": "Sep 22, 2018 7:08:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1537431265500_409212611",
      "id": "20180920-081425_833355913",
      "dateCreated": "Sep 20, 2018 8:14:25 AM",
      "dateStarted": "Sep 22, 2018 7:08:34 PM",
      "dateFinished": "Sep 22, 2018 7:08:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nmain()\n",
      "user": "anonymous",
      "dateUpdated": "Sep 22, 2018 7:08:35 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Confusion matrix of 5-class classification\n[[443   0   0   0   0   0]\n [  0  22   0   0   0   0]\n [  0   0  15   1   0   0]\n [  0   0   1   8   0   0]\n [  0   0   0   0   3   0]\n [  0   0   0   0   0   7]]\n(\u0027Accuracy of the model:\u0027, 0.996)\nConfusion matrix of 5-class classification\n[[451   0   0   0   0   0]\n [  0  24   0   0   0   0]\n [  0   0  10   0   0   0]\n [  0   0   0   9   0   0]\n [  0   0   0   0   3   0]\n [  0   0   0   0   2   1]]\n(\u0027Accuracy of the model:\u0027, 0.996)\nConfusion matrix of 5-class classification\n[[428   1   0   0   0   0]\n [  0  12   0   0   0   0]\n [  0   0  22   0   0   0]\n [  0   0   0  17   0   0]\n [  0   0   0   0  18   1]\n [  0   0   0   0   0   1]]\n(\u0027Accuracy of the model:\u0027, 0.996)\nConfusion matrix of 5-class classification\n[[445   0   0   0   0   0]\n [  0  10   0   0   0   0]\n [  0   0  21   0   0   0]\n [  0   0   0  14   0   0]\n [  0   0   0   0   9   0]\n [  0   0   0   0   1   0]]\n(\u0027Accuracy of the model:\u0027, 0.998)\nConfusion matrix of 5-class classification\n[[434   1   0   0   0   0]\n [  0  11   0   0   0   0]\n [  0   0  23   0   0   0]\n [  0   0   0  17   0   0]\n [  0   0   0   0  12   0]\n [  0   0   0   0   0   2]]\n(\u0027Accuracy of the model:\u0027, 0.998)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1537431299599_65293067",
      "id": "20180920-081459_1696657014",
      "dateCreated": "Sep 20, 2018 8:14:59 AM",
      "dateStarted": "Sep 22, 2018 7:08:35 PM",
      "dateFinished": "Sep 22, 2018 7:08:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "anonymous",
      "dateUpdated": "Sep 22, 2018 6:50:07 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python"
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1537431306655_987703102",
      "id": "20180920-081506_1389857630",
      "dateCreated": "Sep 20, 2018 8:15:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "IOT Demo",
  "id": "2DTKR5BGM",
  "angularObjects": {
    "2DHWQ7A7V:shared_process": [],
    "2DGTFGFBC:shared_process": [],
    "2DHATZD9M:shared_process": [],
    "2DKDARDPF:shared_process": [],
    "2DG8A819A:shared_process": [],
    "2DJVV28U3:shared_process": [],
    "2DKCAA3TS:shared_process": [],
    "2DHEPV9M3:shared_process": [],
    "2DKW8P766:shared_process": [],
    "2DGHX224C:shared_process": [],
    "2DGRSNE7G:shared_process": [],
    "2DGUG4SEP:shared_process": [],
    "2DHM86BYR:shared_process": [],
    "2DHYW1ZN6:shared_process": [],
    "2DJ16C4UE:shared_process": [],
    "2DJ4VH5DW:shared_process": [],
    "2DJBEDGYM:shared_process": [],
    "2DM19CFTF:shared_process": [],
    "2DHHCF91E:shared_process": [],
    "2DKCPR9P1:shared_process": []
  },
  "config": {},
  "info": {}
}